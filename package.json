{
  "name": "code-quality-highlighter",
  "displayName": "Code Quality Highlighter",
  "description": "Real-time code quality analysis with visual feedback and educational tooltips - 150+ patterns for JS/TS/React/PHP",
  "version": "0.1.0",
  "publisher": "alexb-studio",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Linters",
    "Other",
    "Education"
  ],
  "keywords": [
    "code quality",
    "performance",
    "security",
    "react",
    "javascript",
    "typescript",
    "php",
    "analysis",
    "education"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:javascriptreact",
    "onLanguage:php"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "codeQuality.analyzeFile",
        "title": "Analyze Code Quality",
        "icon": "$(search)"
      },
      {
        "command": "codeQuality.showReport",
        "title": "Show Quality Report",
        "icon": "$(graph)"
      },
      {
        "command": "codeQuality.configureRules",
        "title": "Configure Quality Rules",
        "icon": "$(settings-gear)"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Code Quality Highlighter",
      "properties": {
        "codeQuality.enableAutoAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic analysis on file save and change"
        },
        "codeQuality.activeRulesets": {
          "type": "array",
          "default": [
            "performance",
            "security",
            "maintainability",
            "style"
          ],
          "description": "Active rulesets for analysis",
          "items": {
            "type": "string",
            "enum": [
              "performance",
              "security",
              "maintainability",
              "style"
            ]
          }
        },
        "codeQuality.strictMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable strict scoring mode with higher penalties"
        },
        "codeQuality.showGoodPatterns": {
          "type": "boolean",
          "default": true,
          "description": "Highlight good coding patterns in green"
        },
        "codeQuality.maxFileSize": {
          "type": "number",
          "default": 5000,
          "description": "Maximum file size (lines) to analyze"
        },
        "codeQuality.analysisDelay": {
          "type": "number",
          "default": 500,
          "description": "Delay in milliseconds before analysis starts after changes"
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "command": "codeQuality.analyzeFile",
          "group": "navigation",
          "when": "resourceExtname =~ /\\.(js|ts|jsx|tsx|php)$/"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "format": "prettier --write \"src/**/*.ts\"",
    "package": "vsce package",
    "deploy": "vsce publish"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "@types/jest": "^29.5.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.40.0",
    "prettier": "^3.0.0",
    "typescript": "^5.0.0",
    "jest": "^29.5.0",
    "ts-jest": "^29.1.0",
    "@vscode/test-electron": "^2.3.0",
    "vsce": "^2.15.0"
  },
  "dependencies": {
    "@babel/parser": "^7.23.0",
    "@babel/traverse": "^7.23.0",
    "@babel/types": "^7.23.0",
    "php-parser": "^3.1.5"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src",
      "<rootDir>/tests"
    ],
    "testMatch": [
      "**/__tests__/**/*.ts",
      "**/?(*.)+(spec|test).ts"
    ],
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts"
    ]
  }
}
